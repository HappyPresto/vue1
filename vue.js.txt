1 Lesson:

- Как Vue.js хранит данные:
Если наш класс, контролируется объектом Vue (например sample), то когда мы пишем name, то мы
фактически обращаемся к sample.name .
В Vue есть 4 основных ключа, в которых мы описываем данные метода:
1) data - обычные данные 
2) computed - данные вычисляемые на основании других (вызываются один раз) (нельзя использовать при асинхронных операциях, т.к. значение надо получить прямо сейчас)
3) methods - методы, которые у этого объекта есть (вызываются при каждом ререндере шаблона)
4) watch - указываем, какие поля мы будем прослушивать
Не смотря на то, что все это мы описываем, как отдельные объекты, все собирается и пристраивается
к нашему объекту, который будет получен. Vue так ставит ссылки, на эти объекты, что мы сразу
можем обратиться к свойству, только что созданного этого объекта

- Директивы:
Все директивы vue начинаются с "v-". Директив немного, около 10-20 штук, но так же можно написать
свои директивы.
В директиве мы можем указать ссылку на метод, который есть у нашего объекта.
Любой код, которые напишем в директиве, работает в контексте данного объекта Vue
(в JS обработчики события на элементе DOM всегда работают в контексте этого эл-та DOM).
т.е. если мы захотим получить value, то this.value мы не получим value. Потому что этот код
выполняется в контексте двнного объекта Vue (new Vue)
Список директив:
1) v-on
событие
(вместо v-on можно писать @)
v-on:input="" 
мы не можем получить значение через input, т.к. мы потеряли ссылку на наш input. Ссылку на input
можно получить через "$event" ($event.target.value)
<input type="text" 
    v-on:input="name = $event.target.value"
>
v-on:change="" - сработает как input, только после анфокуса
v-on:click
2) v-bind
Атрибут
(вместо v-bind можно писать :)
Присваивает input"у значение из объекта Vue
v-bind:value="name"
3) v-if
Удаляет эл-т из DOM
<h2 v-if="showName">Hello, {{name}}</h2>
Делает проверку
(включает директиву v-else и v-else-if)
Если нужно вывести 2 элемента в v-else, но не хочется делать контейнер для эл-тов, то можно
использовать template. Тогда при рендере template уберется и выведутся только эл-ты (используется как узел)
4) v-show
Ставит эл-т в display: none
(работает быстрее, чем if, т.к. не нужно перерисовывать компонент)
5) v-for 
Цикл 
<li v-for="number in numbers"></li> - генерируется столько раз, сколько элементов в массиве
6) v-text
Равносилен интерполяции
7) v-html 
аналог innerHTML
8) v-model 
Событие + атрибут
9) v-pre
Пропустить компиляцию (повышаем производительность)
10) v-cloak
Скрыть до рендеринга
11) v-once
срендерить единожды